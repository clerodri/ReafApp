// Generated by Dagger (https://dagger.dev).
package layout.memitoapp.di;

import com.clerodri.memitoapp.domain.usecases.TodoUsesCases;
import com.clerodri.memitoapp.domain.usecases.repository.TodoRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModules_ProvideTodoUsesCasesFactory implements Factory<TodoUsesCases> {
  private final Provider<TodoRepository> repositoryProvider;

  public AppModules_ProvideTodoUsesCasesFactory(Provider<TodoRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public TodoUsesCases get() {
    return provideTodoUsesCases(repositoryProvider.get());
  }

  public static AppModules_ProvideTodoUsesCasesFactory create(
      Provider<TodoRepository> repositoryProvider) {
    return new AppModules_ProvideTodoUsesCasesFactory(repositoryProvider);
  }

  public static TodoUsesCases provideTodoUsesCases(TodoRepository repository) {
    return Preconditions.checkNotNullFromProvides(AppModules.INSTANCE.provideTodoUsesCases(repository));
  }
}
